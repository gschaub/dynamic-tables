name: Create Release Branch, Tag, and Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., 1.0.0)"
        required: true
      plugin_slug:
        description: "Plugin slug (folder/zip name)"
        required: true
        default: "dynamic-tables"
      base_branch:
        description: "Base branch to release from"
        required: true
        default: "main"
      plugin_main_file:
        description: "Main plugin file to read Version from"
        required: true
        default: "dynamic-tables.php"

permissions:
  contents: write   # needed to push branch, create tag, and publish release

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production
      VERSION: ${{ inputs.version }}
      TAG: v${{ inputs.version }}
      BASE_BRANCH: ${{ inputs.base_branch }}
      RELEASE_BRANCH: release/v${{ inputs.version }}
      PLUGIN_SLUG: ${{ inputs.plugin_slug }}
      PLUGIN_MAIN_FILE: ${{ inputs.plugin_main_file }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # we will create/push branch & tag

      - name: Configure Git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Verify tag/branch do not already exist
        run: |
          if git ls-remote --exit-code --tags origin "${TAG}" >/dev/null 2>&1; then
            echo "Tag ${TAG} already exists"; exit 1
          fi
          if git ls-remote --exit-code --heads origin "${RELEASE_BRANCH}" >/dev/null 2>&1; then
            echo "Branch ${RELEASE_BRANCH} already exists"; exit 1
          fi

      - name: Create release branch from base
        run: |
          git fetch origin "${BASE_BRANCH}"
          git checkout -B "${RELEASE_BRANCH}" "origin/${BASE_BRANCH}"

      - name: Verify version matches tag (plugin header + readme Stable tag)
        run: |
          WANT="${VERSION}"
          FILE="${PLUGIN_MAIN_FILE}"
          PLUGIN_VER=$(grep -E '^[[:space:]]*\*?[[:space:]]*Version:' "$FILE" | head -1 | sed -E 's/.*Version:\s*//')
          STABLE_TAG=$(grep -E '^Stable tag:' readme.txt | sed -E 's/.*Stable tag:\s*//')
          echo "Expect: ${WANT}"
          echo "Plugin header: ${PLUGIN_VER}"
          echo "Readme stable: ${STABLE_TAG}"
          test "${WANT}" = "${PLUGIN_VER}" || { echo "Mismatch: version != plugin header"; exit 1; }
          test "${WANT}" = "${STABLE_TAG}" || { echo "Mismatch: version != readme Stable tag"; exit 1; }

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Build JS/CSS
        run: |
          npm ci
          # If using wp-scripts, this runs webpack in prod mode (minifies).
          npm run build

      - name: Install Composer (prod only)
        if: hashFiles('composer.json') != ''
        run: |
          curl -sS https://getcomposer.org/installer | php
          php composer.phar install --no-dev --prefer-dist --no-progress --no-interaction

      - name: Remove source maps
        run: |
          for d in build assets; do
            [ -d "$d" ] && find "$d" -type f -name '*.map' -delete
          done

      - name: Force JS minification (Terser safety pass)
        run: |
          npx --yes terser --version
          for d in build assets; do
            if [ -d "$d" ]; then
              find "$d" -type f -name '*.js' ! -name '*.min.js' -print0 | \
              xargs -0 -I{} sh -c 'npx --yes terser "{}" -c passes=2,drop_console=true -m -o "{}"'
            fi
          done

      - name: Force CSS minification (CSSO safety pass)
        run: |
          npx --yes csso --version
          for d in build assets; do
            if [ -d "$d" ]; then
              find "$d" -type f -name '*.css' ! -name '*.min.css' -print0 | \
              xargs -0 -I{} sh -c 'npx --yes csso "{}" --output "{}"'
            fi
          done

      - name: Stage runtime files to package dir (allowlist)
        run: |
          rm -rf dist && mkdir -p "dist/${PLUGIN_SLUG}"
          rsync -av \
            --include "/*.php" \
            --include "/readme.txt" \
            --include "/license*" \
            --include "/languages/***" \
            --include "/includes/***" \
            --include "/templates/***" \
            --include "/build/***" \
            --include "/assets/***" \
            --include "/vendor/***" \
            --exclude "*" \
            ./ "dist/${PLUGIN_SLUG}/"

      - name: Replace branch contents with runtime-only tree
        shell: bash
        run: |
          # remove everything except .git and dist
          find . -mindepth 1 -maxdepth 1 \
            ! -name .git \
            ! -name dist \
            -exec rm -rf {} +
          # move packaged files to repo root (release branch)
          shopt -s dotglob nullglob
          mv "dist/${PLUGIN_SLUG}/"* .
          # clean up
          rm -rf dist
          # commit runtime-only tree
          git add -A
          git commit -m "chore(release): prepare runtime-only tree for v${VERSION}"

      - name: Push release branch
        run: git push --set-upstream origin "${RELEASE_BRANCH}"

      - name: Create signed/annotated tag and push
        run: |
          git tag -a "${TAG}" -m "Release ${TAG}"
          git push origin "${TAG}"

      - name: Build release ZIP from branch
        run: |
          mkdir -p zipdir
          rsync -av --exclude ".git" ./ zipdir/
          cd zipdir
          zip -r "../${PLUGIN_SLUG}-v${VERSION}.zip" .
          cd ..
          rm -rf zipdir

      - name: Create GitHub Release & upload ZIP
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: Release ${{ env.TAG }}
          files: ${{ env.PLUGIN_SLUG }}-v${{ env.VERSION }}.zip
          generate_release_notes: true
